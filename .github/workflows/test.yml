name: PowerShell & SQLite Data Management System Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "Platform: $($PSVersionTable.Platform)"
        
    - name: Install SQLite (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3
        
    - name: Install SQLite (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install sqlite
        
    - name: Install SQLite (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # SQLite is typically pre-installed on Windows
        # If not available, download and install
        if (-not (Get-Command sqlite3 -ErrorAction SilentlyContinue)) {
          Write-Host "Installing SQLite for Windows..."
          # Add SQLite installation logic if needed
        }
        
    - name: Install Pester
      shell: pwsh
      run: |
        Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser
        Import-Module Pester
        Get-Module Pester -ListAvailable
        
    - name: Run Foundation Layer Tests
      shell: pwsh
      run: |
        ./tests/run-test.ps1 -Layer "Foundation" -OutputFormat "JUnitXml"
        
    - name: Run Infrastructure Layer Tests
      shell: pwsh
      run: |
        ./tests/run-test.ps1 -Layer "Infrastructure" -OutputFormat "JUnitXml"
        
    - name: Run DataAccess Layer Tests
      shell: pwsh
      run: |
        ./tests/run-test.ps1 -Layer "DataAccess" -OutputFormat "JUnitXml"
        
    - name: Run DataProcessing Layer Tests
      shell: pwsh
      run: |
        ./tests/run-test.ps1 -Layer "DataProcessing" -OutputFormat "JUnitXml"
        
    - name: Run Process Module Tests
      shell: pwsh
      run: |
        ./tests/run-test.ps1 -TestPath "Process" -OutputFormat "JUnitXml"
        
    - name: Run Integration Tests
      shell: pwsh
      run: |
        ./tests/run-test.ps1 -TestPath "Integration" -OutputFormat "JUnitXml"
        
    - name: Run Feature Tests
      shell: pwsh
      run: |
        ./tests/run-test.ps1 -TestPath "Feature" -OutputFormat "JUnitXml"
        
    - name: Run All Tests with Coverage
      shell: pwsh
      run: |
        ./tests/run-test.ps1 -OutputFormat "JUnitXml" -ShowCoverage
        
    - name: Upload Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: PowerShell Tests (${{ matrix.os }})
        path: tests/TestResults.xml
        reporter: java-junit
        fail-on-error: true
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest'
      with:
        file: tests/coverage.xml
        fail_ci_if_error: false
        
    - name: Archive Test Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          tests/TestResults.*
          tests/coverage.*
          logs/
        retention-days: 30
        
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PowerShell
      shell: pwsh
      run: |
        Install-Module -Name Pester -Force -SkipPublisherCheck -Scope CurrentUser
        
    - name: Install SQLite
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3
        
    - name: Create Large Test Data
      shell: pwsh
      run: |
        ./tests/create-utf8-tests.ps1
        
    - name: Run Performance Tests
      shell: pwsh
      run: |
        # 大量データでのパフォーマンステスト
        $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
        ./tests/run-test.ps1 -TestPath "Integration/FullSystem.Tests.ps1" -ShowCoverage
        $stopwatch.Stop()
        
        Write-Host "Performance Test Duration: $($stopwatch.Elapsed)"
        
        # パフォーマンス基準の確認
        if ($stopwatch.ElapsedMilliseconds -gt 300000) {  # 5分
          Write-Error "Performance test took too long: $($stopwatch.ElapsedMilliseconds)ms"
          exit 1
        }
        
    - name: Memory Usage Test
      shell: pwsh
      run: |
        $before = [GC]::GetTotalMemory($false)
        ./tests/run-test.ps1
        $after = [GC]::GetTotalMemory($true)
        $usedMB = ($after - $before) / 1MB
        
        Write-Host "Memory Used: $usedMB MB"
        
        # メモリ使用量の確認
        if ($usedMB -gt 500) {  # 500MB
          Write-Error "Memory usage too high: $usedMB MB"
          exit 1
        }
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript  # PowerShellはJavaScriptアナライザーで解析
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: PSScriptAnalyzer
      shell: pwsh
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        
        # PowerShellスクリプトの静的解析
        $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery
        
        if ($results) {
          $results | Format-Table
          
          $errors = $results | Where-Object Severity -eq 'Error'
          if ($errors) {
            Write-Error "PSScriptAnalyzer found $($errors.Count) error(s)"
            exit 1
          }
        }
        
    - name: Check for Secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD